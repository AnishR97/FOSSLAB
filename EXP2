FOSS LAB EXPERIMENT 2 (TVE15CS012)
==================================

AIM:- Linux commands for redirection, pipes, filters, job control, file ownerships, file
permissions, links and system file hierarchy

REDIRECTION OF STANDARD OUTPUT/INPUT:-
---------------------------------------
# By default most command line programs send their output to the standard output which by
default displays it on the screen
>> <command_name> > <filename> ==> Overwrites the file <file_name> with the output of
the command
Example:- ls > file.txt ==> Overwrites the contents in file.txt with the output of the command
ls
>> <command_name> >> <filename> ==> Appends the output of the command to the file
filename
Example:- ls >> file.txt ==> Appends the output of the command ls to the file with the
filename file.txt
# Most of the command line programms accept its input from the standard input and the
standard input by default gets its contents from the keyboard. Similar to standard ouput it can
be redirected.
>> sort < <filename> ==> Sort command processes the contents of the file with the name
<filename>>>sort < <file1> > <file2> ==> Processes the contents of file 1 and redirects its output to file
2


PIPES:-
-------
#Pipes are used to redirect the standard output of one command to the standard inout of
another command
>> <command1> | <command2> ==> The standard output of command 1 is redirected to the
standard input of command 2
Example:- ls -lt | head ==> Displays the 10 newest files in the current directory
du | sort -nr ==> Displays a list of directories, the amount of space they
consume, sorted from the largest to the smallest in the amount of memory each directory
occupies


FILTERS:-
----------
#Filters take standard input and perform an operation upon it and sends the results to the
standard output. In this way, they can be used to process information in powerful ways
* sort --> Sorts the standard input and sends the sorted ouput to the standard output
Example :- sort <filename> ==> Rearranges each line of the file in alphabetical order and
outputs it to the standard output
* uniq --> Given a sorted stream of data from the standard input, it removes the duplicatelines of data and returns it to the standard output
Example:- uniq <filename> ==> Removes the duplicate lines of text from the filename and
outputs it to the standard output
* grep --> Examines each line of data it recieves from the standard input and output every
line that contains a certain specified pattern of characters
Example:- grep "string" <filename> ==> Examines each line of the file and outputs every line
of the file containing the input string to the standard output
* fmt --> Reads text from standard input and outputs the formatted text to the standard output
Example:- fmt <filename> ==> Formats the contents of the file and outputs it to the standard
output
* pr --> Takes data from the standard input and splits the data into pages with page breaks,
footers and headers in preparation for printing
Example:- pr <filename> ==> Displays the contents of the file one page after the other and
returns the output to the standard output
* head --> Outputs the first few lines of the file and returns it to the standard output
Example:- head <filename> ==> Displays the first ten lines of the file
* tail --> Outputs the last few lines of the file and returns it to the standard output
Example:- last <filename> ==> Displays the last ten lines of the file
* tr --> Translates Characters. Can be used to perfrom tasks such as uppercase to lowercase
conversions or changing the line termination characters from one type to another
Example:- tr [:lower:] [:upper:] ==> Takes input from the keyboard and outputs each
character of the input to uppercase characters and outputs it to the standard outputJOB CONTROL:-
--------------
#There are several commands used to control processes in Linux
* ps --> List the processes running in the system. ps is a external command which tells you
about the processes running on the system
Example:- ps ==> Lists all the processes running on the system
ps aux ==> Lists all the processes (a= show process for all the users, u=display the
process's user/owner, x= also show the
processes not attached to the terminal)
* kill --> Sends a signal to the processes specified (usually used to stop the execution of a
process)
Example:- kill -l ==> List the signal names that can be sent to the processes in linux
kill <PID> ==> To kill the process specified by the process ID <PID>. To obtain the
process id of a certain process use the ps
command.
kill -s SIGKILL <PID> ==> Used to send the SIGKILL signal to the process with the
process id PID. This command is used to forcefully
kill a process without any
memory cleanup.
# A signal is an asynchronous notification sent to a process or to a specific thread within the
same process in order to notify it of an event that occurred.
* jobs --> An alternate way of listing the processes. jobs is a shell builtin command which
gives you information internal to the shell such as the job numbers
Example:- jobs ==> Lists the jobs that the current shell is managing
* bg --> Used to put a process in the background
* fg --> Used to put a process in the foreground
